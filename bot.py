import time
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, InlineKeyboardButton, \
    InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import bot_token
from aiogram.utils import executor
import sql_part
import datetime


async def on_startup(_):
    """
    –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    """
    sql_part.sql_start()
    print("DB is ready")

""" –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ """

storage = MemoryStorage()
bot = Bot(token=bot_token.BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)

""" –ú–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π input """


class FSMAdmin(StatesGroup):
    """
    –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
    """
    name = State()
    date = State()
    description = State()
    price = State()
    amount = State()
    photo = State()


class FSMClient(StatesGroup):
    """
    –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ —Å–∞–º–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º
    """
    travel_id = State()
    tg_user_id = State()
    travel_name = State()
    travel_date = State()
    tg_user_name = State()
    client_amount = State()
    client_name = State()
    phone = State()
    payment = State()


class FSMBookClient(StatesGroup):
    """
    –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ —Å–∞–º–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º
    """
    travel_id = State()
    tg_user_id = State()
    travel_name = State()
    travel_date = State()
    tg_user_name = State()
    client_amount = State()
    client_name = State()
    phone = State()
    payment = State()


class FSMClientReview(StatesGroup):
    """
    –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
    """
    name = State()
    date = State()
    id_travel = State()
    review = State()


class FSMAdminSendToClient(StatesGroup):
    """
    –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    id_travel = State()
    message_send = State()
    id_users = State()


""" –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ """

button_create_travel = InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üèï", callback_data="#1#")  # create_command
button_list_travel = InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π üèïüèïüèï", callback_data="#2#")  # list_of_travel_command
button_archive_list_travel = InlineKeyboardButton("–ê—Ä—Ö–∏–≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π üìº", callback_data="#38#")  # list_of_travel_command

button_hide_menu = InlineKeyboardButton(text="–°–≤–µ—Ä–Ω—É—Ç—å –∑–∞–¥–∞—á–∏", callback_data="hide_menu")
button_hide = InlineKeyboardMarkup().add(button_hide_menu)

admin_buttons = InlineKeyboardMarkup()  # one_time_keyboard=True
admin_buttons.add(button_create_travel).add(button_list_travel).add(button_archive_list_travel)  # .add(button_travelers_summary).add(button_book)

client_button_book = InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üèï", callback_data="#3#")  # list_travel_client
client_button_my_books = InlineKeyboardButton("–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è üèïüèïüèï", callback_data="#4#")  # all_client_book_list
button_archive_list_travel_client = InlineKeyboardButton("–ú–æ–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è üçÉ", callback_data="#47#")  # list_of_travel_command

client_buttons = InlineKeyboardMarkup()
client_buttons.add(client_button_book).add(client_button_my_books).add(button_archive_list_travel_client)

""" functions """

""" –û–±–µ—Ä—Ç–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∏–Ω–ø—É—Ç–∞ """


def admin(function):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    –æ—Ç –∞–¥–º–∏–Ω–∞)
    """

    async def wrapper(message):
        if message.from_user.id != bot_token.ADMIN_ID:
            await message.answer("–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞! üò°")
        else:
            return await function(message)

    return wrapper


def control_message_create_travel_admin(function):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä–æ—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ç –∫–æ–º–∞–Ω–¥—É "–°–æ–∑–¥–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ" –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤
    """

    async def wrapper(message):
        if len(message.text) > 21:
            await message.answer("–ø—Ä–æ—Å—Ç–∏, –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É! ü§∑‚Äç‚ôÇ")
        else:
            return await function(message)

    return wrapper


def control_message_list_of_travels_admin(function):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ç –∫–æ–º–∞–Ω–¥—É "–°–ø–∏—Å–æ–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π" –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤
    """

    async def wrapper(message):
        if len(message.text) > 24:
            await message.answer("–ø—Ä–æ—Å—Ç–∏, –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É! ü§∑‚Äç‚ôÇ")
        else:
            return await function(message)

    return wrapper


def exist_or_not(function):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–µ—Ç
    """

    async def wrapper(callback, id_travel):
        diction = sql_part.sql_info_travel(id_travel)
        if len(diction) == 0:
            await bot.delete_message(message_id=callback.message.message_id,
                                     chat_id=callback.message.chat.id)
            await callback.answer("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ üôÑ")
        else:
            return await function(callback, id_travel)

    return wrapper


async def clear_chat(message):
    """
    –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    """
    last_message = message.message_id
    while last_message > 1:
        try:
            await bot.delete_message(message_id=last_message, chat_id=message.chat.id)
            last_message -= 1
        except Exception:
            break


async def clear_chat_2(message, how_many_msg):
    """
    –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞, —É–¥–∞–ª–∏—Ç—å 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    last_message, i = message.message_id, 0
    while i < how_many_msg:
        try:
            await bot.delete_message(message_id=last_message, chat_id=message.chat.id)
        except Exception:
            pass
        i += 1
        last_message -= 1


async def confirm_action_admin_delete_travel(callback, id_travel, travel_name, travel_date):
    """
    –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–∞–∏—è - –∞–¥–º–∏–Ω
    """
    keyboard = InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    await callback.message.answer("<b>–¢–æ—á–Ω–æ?</b>üò±",reply_markup=keyboard
                         .insert(InlineKeyboardButton('–î–∞, 100% üò§', callback_data=f'#5#&{id_travel}&{travel_name}&{travel_date}'))  # admin_delete_travel_yes_action
                         .insert(InlineKeyboardButton('–ù–µ—Ç üò∞', callback_data='#6#')), parse_mode="html"  # admin_delete_travel_no_action
                         )


async def confirm_action_admin_client_book(callback, id_travel, id):
    """
    –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞  - –∞–¥–º–∏–Ω
    """
    keyboard = InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    await callback.message.answer("<b>–¢–æ—á–Ω–æ?</b> üò±", reply_markup=keyboard
                         .insert(InlineKeyboardButton('–î–∞, 100% üò§', callback_data=f'#7#&{id_travel}&{id}'))  # admin_delete_client_book_yes_action
                         .insert(InlineKeyboardButton('–ù–µ—Ç üò∞', callback_data='#8#')), parse_mode="html"  # admin_delete_client_book_no_action
                         )


async def exist_or_not_travel():
    """
    –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ
    """
    diction = sql_part.sql_list_travel()
    if len(diction) == 0:
        return False
    return True


async def archive_exist_or_not_travel():
    """
    –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–æ –∞—Ä—Ö–∏–≤–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ
    """
    diction = sql_part.sql_list_travel_archive()
    if len(diction) == 0:
        return False
    return True


async def list_travel_admin(message):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π (admin) / –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    """
    keyboard = InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    for string in sql_part.sql_list_travel():
        button = InlineKeyboardButton(f"üèï {string[1]}  {string[2]}",  # string[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Ç. string[2] - –¥–∞—Ç–∞
                                      callback_data=f"#9#&{string[0]}")  # string[0] - id  # admin_all_info_travel
        keyboard.add(button)
    await message.answer(f"üíÅ‚Äç‚ôÇ –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π:", reply_markup=keyboard
                           .add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='#10#')))  # drop_travel_list


async def archive_list_travel_admin(message):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—à–µ–¥—à–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π (admin) / –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    """
    keyboard = InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    for string in sql_part.sql_list_travel_archive():
        button = InlineKeyboardButton(f"üèï {string[1]}  {string[2]}",  # string[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Ç. string[2] - –¥–∞—Ç–∞
                                      callback_data=f"#39#&{string[0]}")  # string[0] - id  # admin_all_info_travel
        keyboard.add(button)
    await message.answer(f"üíÅ‚Äç‚ôÇ –≤–æ—Ç –∞—Ä—Ö–∏–≤ –ø—Ä–æ—à–µ–¥—à–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π:", reply_markup=keyboard
                           .add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='#10#')))  # drop_travel_list


async def all_info_travel_admin(message, callback, id_travel):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é (admin) - —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å
    """
    for string in sql_part.sql_info_travel(id_travel):
        # date_from_mysql = string[2].strftime('%Y-%m-%d')
        # date_split = date_from_mysql.split("-")
        # date_value_2 = f'{date_split[2]}-{date_split[1]}-{date_split[0]}'  # –º–µ–Ω—è—é –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã —Å yyyy-mm-dd –Ω–∞ dd-mm-yyyy
        await bot.send_photo(callback.from_user.id, string[6],  # string[6] - —Ñ–æ—Ç–æ
                             f'{string[1]}\n\n–î–∞—Ç–∞: {string[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {string[3]} '
                             f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {string[4]}\n–ö–æ–ª–∏—á–µ–≤–æ –º–µ—Å—Ç: {string[5]}',
                             reply_markup=InlineKeyboardMarkup(row_width=2, resize_keyboard=True) \
                             .add(InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è ‚õ∑üö£‚Äç‚ôÄüèÇ",
                                                       callback_data=f"#11#&{string[0]}"))  # string[0] - id –ø—É—Ç  # list_of_travelers
                             .add(
                                 InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å –∂–µ–ª–∞—é—â–µ–≥–æ üôã‚Äç‚ôÄüôã",
                                                      callback_data=f"#12#&{string[0]}&{string[1]}&{string[2]}"))  # string[0] - id –ø—É—Ç book_client_by_admin  # book_client_by_admin
                             .add(InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å ‚ùÑ",
                                                       callback_data=f"#13#&{id_travel}"))  # close_book
                             .add(InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                                       callback_data=f"#14#"))  # back_to_travel_list_admin
                             .add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ ‚ùå",
                                                       callback_data=f"#15#&{string[0]}&{string[1]}&{string[2]}"))  # delete_travel_admin
                               # string[0] - id –ø—É—Ç, string[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, string[2] - –¥–∞—Ç–∞
                             .add(InlineKeyboardButton("–£–±—Ä–∞—Ç—å –≤ –∞—Ä—Ö–∏–≤ üì¶",
                                  callback_data=f"#45#&{string[0]}")))


async def all_info_travel_admin_2(message, callback, id_travel):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é (admin) - —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å
    """
    for string in sql_part.sql_info_travel(id_travel):
        await bot.send_photo(callback.from_user.id, string[6],  # string[6] - —Ñ–æ—Ç–æ
                             f'{string[1]}\n\n–î–∞—Ç–∞: {string[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {string[3]} '
                             f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {string[4]}\n–ö–æ–ª–∏—á–µ–≤–æ –º–µ—Å—Ç: {string[5]}',
                             reply_markup=InlineKeyboardMarkup(row_width=2, resize_keyboard=True) \
                             .add(InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è ‚õ∑üö£‚Äç‚ôÄüèÇ",
                                                       callback_data=f"#11#&{string[0]}"))  # string[0] - id –ø—É—Ç
                             .add(
                                 InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å –∂–µ–ª–∞—é—â–µ–≥–æ üôã‚Äç‚ôÄüôã",
                                                      callback_data=f"#12#&{string[0]}&{string[1]}&{string[2]}"))  # string[0] - id –ø—É—Ç book_client_by_admin
                             .add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å ü•≥",
                                                       callback_data=f"#16#&{id_travel}"))  # open_book
                             .add(InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                                       callback_data=f"#14#"))  # back_to_travel_list_admin
                             .add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ ‚ùå",
                                                       callback_data=f"#15#&{string[0]}&{string[1]}&{string[2]}"))  # delete_travel_admin
                             .add(InlineKeyboardButton("–£–±—Ä–∞—Ç—å –≤ –∞—Ä—Ö–∏–≤ üì¶",
                                                       callback_data=f"#45#&{string[0]}")))


async def archive_all_info_travel_admin(message, callback, id_travel):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞—Ä—Ö–∏–≤–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é (admin)
    """
    for string in sql_part.sql_info_travel(id_travel):
        # date_from_mysql = string[2].strftime('%Y-%m-%d')
        # date_split = date_from_mysql.split("-")
        # date_value_2 = f'{date_split[2]}-{date_split[1]}-{date_split[0]}'  # –º–µ–Ω—è—é –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã —Å yyyy-mm-dd –Ω–∞ dd-mm-yyyy
        await bot.send_photo(callback.from_user.id, string[6],  # string[6] - —Ñ–æ—Ç–æ
                             f'{string[1]}\n\n–î–∞—Ç–∞: {string[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {string[3]} '
                             f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {string[4]}\n–ö–æ–ª–∏—á–µ–≤–æ –º–µ—Å—Ç: {string[5]}',
                             reply_markup=InlineKeyboardMarkup(row_width=2, resize_keyboard=True) \
                             .add(InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è ‚õ∑üö£‚Äç‚ôÄüèÇ",
                                                       callback_data=f"#42#&{string[0]}"))  # string[0] - id –ø—É—Ç  # list_of_travelers
                             # .add(
                             #     InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å –∂–µ–ª–∞—é—â–µ–≥–æ üôã‚Äç‚ôÄüôã",
                             #                          callback_data=f"#12#&{string[0]}&{string[1]}&{string[2]}"))  # string[0] - id –ø—É—Ç book_client_by_admin  # book_client_by_admin
                             # .add(InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å ‚ùÑ",
                             #                           callback_data=f"#13#&{id_travel}"))  # close_book
                             .add(InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                                       callback_data=f"#40#"))  # back_to_travel_list_admin
                             .add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ ‚ùå",
                                                       callback_data=f"#15#&{string[0]}&{string[1]}&{string[2]}"))  # delete_travel_admin
                               # string[0] - id –ø—É—Ç, string[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, string[2] - –¥–∞—Ç–∞
                             .add(InlineKeyboardButton("–£–±—Ä–∞—Ç—å –∏–∑ –∞—Ä—Ö–∏–≤–∞ üì¶",
                                                       callback_data=f"#46#&{string[0]}")))


async def exist_or_not_client_list_travel(id_travel):
    """
    –ï—Å—Ç—å –∑–∞–ø–∏—Å–∞–≤—à–∏–µ—Å—è –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–µ—Ç
    """
    diction = sql_part.sql_get_list_of_travelers_for_one_travel(id_travel)  # call[1] - id_travel
    if len(diction) == 0:
        return False
    return True


async def get_client_list_travel(message, callback, id_travel):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    """
    diction = sql_part.sql_get_list_of_travelers_for_one_travel(id_travel)  # call[1] - id_travel
    max_book = sql_part.sql_get_default_amount_book_info(id_travel)
    current_book = sql_part.sql_get_current_amount_book_info(id_travel)
    keyboard = InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    for string in diction:
        button = InlineKeyboardButton(f"ü§† {string[0]} | üí∏ –æ–ø–ª–∞—Ç–∞: {string[3]}",  # string[0] - –∏–º—è, string[3] - –æ–ø–ª–∞—Ç–∞
                                      callback_data=f"#37#&{string[4]}&{string[6]}&{string[5]}")  # string[4] - id, string[6] - travel_id   # info_client
        keyboard.add(button)
    await bot.send_message(callback.from_user.id, f"üìç –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å: {current_book} –∏–∑ {max_book}\n\nüíÅ‚Äç‚ôÇ –≤–æ—Ç –∫—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è:",
                           reply_markup=keyboard
                           .add(InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úâ",
                                                                          callback_data=f"#17#&{id_travel}"))  # send_message_to
                           .add(InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                                     callback_data=f"#18#&{id_travel}"))  # back_to_all_info_travel
                           )


async def archive_get_client_list_travel(message, callback, id_travel):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∞—Ä—Ö–∏–≤–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ)
    """
    diction = sql_part.sql_get_list_of_travelers_for_one_travel(id_travel)  # call[1] - id_travel
    max_book = sql_part.sql_get_default_amount_book_info(id_travel)
    current_book = sql_part.sql_get_current_amount_book_info(id_travel)
    keyboard = InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    for string in diction:
        button = InlineKeyboardButton(f"ü§† {string[0]} | üí∏ –æ–ø–ª–∞—Ç–∞: {string[3]}",  # string[0] - –∏–º—è, string[3] - –æ–ø–ª–∞—Ç–∞
                                      callback_data=f"#43#&{string[4]}&{string[6]}&{string[5]}")  # string[4] - id, string[6] - travel_id   # info_client
        keyboard.add(button)
    await bot.send_message(callback.from_user.id, f"üìç –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å: {current_book} –∏–∑ {max_book}\n\nüíÅ‚Äç‚ôÇ –≤–æ—Ç –∫—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è:",
                           reply_markup=keyboard
                           # .add(InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úâ",
                           #                                                callback_data=f"#17#&{id_travel}"))  # send_message_to
                           .add(InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                                     callback_data=f"#41#&{id_travel}"))  # back_to_all_info_travel
                           )


async def get_traveler_info(message, id, travel_id, tg_user_id):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ
    """
    await bot.delete_message(message_id=message.message_id, chat_id=message.chat.id)
    diction = sql_part.sql_get_traveler_info(id, travel_id)  # call[1] - id, call[2] - travel_id
    tg_user_id = tg_user_id  # tg id user
    for element in [f"‚ú≥ –ò–º—è: {dict[0]}\n@{dict[6]}\n\n- —Ç–µ–ª.: {dict[1]}\n- –∑–∞–±—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –º–µ—Å—Ç: {dict[2]}\n" \
                    f"- –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø–ª–∞—Ç—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {dict[3]}\n" for dict in diction]:
        await bot.send_message(bot_token.ADMIN_ID, element,
                               reply_markup=InlineKeyboardMarkup(row_width=2, resize_keyboard=True).add(
                                   InlineKeyboardButton(f"–æ–ø–ª–∞—Ç–∞ ‚úÖ",
                                                        callback_data=f"#19#&{travel_id}&{tg_user_id}&{id}")).insert(  # payment_ok
                                   InlineKeyboardButton("–æ–ø–ª–∞—Ç–∞ ‚ùå",
                                                        callback_data=f"#20#&{travel_id}&{tg_user_id}&{id}"))  # payment_cancel
                               .add(InlineKeyboardButton("üôÖ‚Äç‚ôÇ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                                                         callback_data=f"#21#&{travel_id}&{id}"))  # cancel_by_admin
                               .add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥",
                                                         callback_data=f"#22#&{travel_id}"))  # back_to_all_travelers_list
                               )


async def archive_get_traveler_info(message, id, travel_id, tg_user_id):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ (–∞—Ä—Ö–∏–≤–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ)
    """
    await bot.delete_message(message_id=message.message_id, chat_id=message.chat.id)
    diction = sql_part.sql_get_traveler_info(id, travel_id)  # call[1] - id, call[2] - travel_id
    tg_user_id = tg_user_id  # tg id user
    for element in [f"‚ú≥ –ò–º—è: {dict[0]}\n@{dict[6]}\n\n- —Ç–µ–ª.: {dict[1]}\n- –∑–∞–±—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –º–µ—Å—Ç: {dict[2]}\n" \
                    f"- –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø–ª–∞—Ç—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {dict[3]}\n" for dict in diction]:
        await bot.send_message(bot_token.ADMIN_ID, element,
                               reply_markup=InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
                               # .add(InlineKeyboardButton(f"–æ–ø–ª–∞—Ç–∞ ‚úÖ",
                               #                          callback_data=f"#19#&{travel_id}&{tg_user_id}&{id}")).insert(  # payment_ok
                               #     InlineKeyboardButton("–æ–ø–ª–∞—Ç–∞ ‚ùå",
                               #                          callback_data=f"#20#&{travel_id}&{tg_user_id}&{id}"))  # payment_cancel
                               # .add(InlineKeyboardButton("üôÖ‚Äç‚ôÇ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                               #                           callback_data=f"#21#&{travel_id}&{id}"))  # cancel_by_admin
                               .add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥",
                                                         callback_data=f"#44#&{travel_id}"))  # back_to_all_travelers_list
                               )


async def delete_travel_admin(callback, id_travel, travel_name, travel_date):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è - –∞–¥–º–∏–Ω
    """
    await sql_part.sql_delete_travel(id_travel)
    await callback.answer(f"–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ {travel_name} –æ—Ç {travel_date} —É–¥–∞–ª–µ–Ω–æ üëå")
    await clear_chat_2(callback.message, 10)
    if await exist_or_not_travel() is False:
        # await bot.delete_message(message_id=callback.message.message_id,
        #                          chat_id=callback.message.chat.id)
        await callback.message.answer('üü¢ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ ‚¨á', reply_markup=admin_buttons)
    else:
        await list_travel_admin(callback.message) #


async def put_to_archive(callback, id_travel):
    """
    –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –∞—Ä—Ö–∏–≤ - –∞–¥–º–∏–Ω
    """
    await sql_part.sql_put_to_archive_travel(id_travel)
    await callback.answer(f"–ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –∞—Ä—Ö–∏–≤ üëå")
    await clear_chat_2(callback.message, 10)
    if await exist_or_not_travel() is False:
        # await bot.delete_message(message_id=callback.message.message_id,
        #                          chat_id=callback.message.chat.id)
        await callback.message.answer('üü¢ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ ‚¨á', reply_markup=admin_buttons)
    else:
        await list_travel_admin(callback.message)


async def restore_from_archive(callback, id_travel):
    """
    –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∏–∑ –∞—Ä—Ö–∏–≤–∞ - –∞–¥–º–∏–Ω
    """
    await sql_part.sql_restore_from_archive(id_travel)
    await callback.answer(f"–í–µ—Ä–Ω—É–ª –≤ '–°–ø–∏—Å–æ–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π' üëå")
    await clear_chat_2(callback.message, 10)
    if await archive_exist_or_not_travel() is False:
        # await bot.delete_message(message_id=callback.message.message_id,
        #                          chat_id=callback.message.chat.id)
        await callback.message.answer('üü¢ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ ‚¨á', reply_markup=admin_buttons)
    else:
        await archive_list_travel_admin(callback.message)


async def cancel_book_by_admin(callback, travel_id, id):  #####
    """
    –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–æ–º
    """
    await sql_part.sql_cancel_travel_client_by_admin(travel_id, id)
    await callback.answer("‚ùó –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await clear_chat_2(callback.message, 10)
    if await exist_or_not_client_list_travel(travel_id):
        await get_client_list_travel(callback.message, callback, travel_id)
    else:
        status = sql_part.sql_get_book_status(travel_id)
        if status == "open":
            await all_info_travel_admin(callback.message, callback, travel_id)
        else:
            await all_info_travel_admin_2(callback.message, callback, travel_id)


""" –û–ø–∏—Å–∞–Ω–∏–µ handlers """

""" –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã """


@dp.message_handler(commands="cancel", state="*")
async def cancel_command(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        last_msg = await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. –Ø –Ω–∏—á–µ–≥–æ –∏ –Ω–µ –¥–µ–ª–∞–ª ))")
        time.sleep(1.5)
        await clear_chat_2(last_msg, 25)
        if message.from_user.id == bot_token.ADMIN_ID or message.from_user.id == bot_token.MARAT:
            await message.answer('üü¢ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ ‚¨á', reply_markup=admin_buttons)
        else:
            await message.answer('üü¢ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ ‚¨á', reply_markup=client_buttons)
    else:
        await state.finish()
        last_msg = await message.answer("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ üëå")
        time.sleep(1.5)
        await clear_chat_2(last_msg, 25)
        if message.from_user.id == bot_token.ADMIN_ID or message.from_user.id == bot_token.MARAT:
            await message.answer('üü¢ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ ‚¨á', reply_markup=admin_buttons)
        else:
            await message.answer('üü¢ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ ‚¨á', reply_markup=client_buttons)


@dp.message_handler(commands="start")
async def start_command(message: types.Message):
    await clear_chat_2(message, 10)
    if message.from_user.id == bot_token.ADMIN_ID:
        await message.answer(
            '–ü—Ä–∏–≤–µ—Ç! üëã\n\n–Ø —Ç–≤–æ–π –±–æ—Ç - –ø–æ–º–æ—â–Ω–∏–∫ ü§ñ'
            '\n\n–ù–∞—á–Ω–µ–º?\n\n–ù–∞–∂–º–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å '
            '—Å–æ –º–Ω–æ–π üîß\n\n–ò–ª–∏ –Ω–∞–∂–∏–º–∞–π /menu, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –¥–µ–ª—É ü§ì', parse_mode="Markdown")

    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç! üëã\n\n–Ø –±–æ—Ç - –ø–æ–º–æ—â–Ω–∏–∫ ü§ñ –∏–∑ –∫–æ–º–∞–Ω–¥—ã friendstrip!\n\n–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å:\n\nInstagram - [friendstrip](https://www.instagram.com/friends_trip/)\n–ì—Ä—É–ø–ø–∞ –≤ telegram - @friendstrip'
                             '\n\n–ù–∞—á–Ω–µ–º?\n\n–ù–∞–∂–º–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å '
                             '—Å–æ –º–Ω–æ–π üîß\n\n–ò–ª–∏ –Ω–∞–∂–∏–º–∞–π /menu, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –¥–µ–ª—É ü§ì', parse_mode="Markdown")


@dp.message_handler(commands="help")
async def help_command(message: types.Message):
    await clear_chat_2(message, 25)
    if message.from_user.id != bot_token.ADMIN_ID:
        await message.answer('–°–ø–µ—à—É –Ω–∞ –ø–æ–º–æ—â—å! üöë \n\n–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, '
                             '–ø—Ä–æ—Å—Ç–æ –Ω–∞–±–µ—Ä–∏ "/" –≤ —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞.  '
                             '\n\n–°–∞–º—ã–µ –≥–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —ç—Ç–æ: /menu –∏ /cancel. \n\n–° –ø–æ–º–æ—â—å—é /menu —Ç–µ–±–µ '
                             '–æ—Ç–∫—Ä–æ–µ—Ç—Å—è '
                             '—Å–ø–∏—Å–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å–≤—è–∑–∞–Ω—ã—Ö —Å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º–∏. \n\n–ö–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç–º–µ–Ω–∏—Ç '
                             '–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π –∏ –≤–µ—Ä–Ω–µ—Ç —Ç–µ–±—è –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ. \n\n–í–ø–µ—Ä–µ–¥ –∫ '
                             '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º! üèÉ‚Äç‚ôÄüèÉ‚Äç‚ôÇ\n\nP.S.\n–í—Å—Ç—É–ø–∞–π –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É –≤ telegram- @friendstrip'
                             '\n–∏ –Ω–µ –∑–∞–±—É–¥—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—Å –≤ instagram - '
                             '[friendstrip](https://www.instagram.com/friends_trip/)', parse_mode="Markdown")
    else:
        await message.answer('–°–ø–µ—à—É –Ω–∞ –ø–æ–º–æ—â—å! üöë \n\n–ù–∞–±—Ä–∞–≤ "/" –≤ —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞,  '
                             '—É–≤–∏–¥–∏—à—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—à—å –º–Ω–µ '
                             '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å. \n\n–°–∞–º—ã–µ –≥–ª–∞–≤–Ω—ã–µ —ç—Ç–æ: /menu –∏ /cancel. \n\n–° –ø–æ–º–æ—â—å—é /menu —Ç–µ–±–µ '
                             '–æ—Ç–∫—Ä–æ–µ—Ç—Å—è '
                             '—Å–ø–∏—Å–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å–≤—è–∑–∞–Ω—ã—Ö —Å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º–∏. \n\n–ö–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç–º–µ–Ω–∏—Ç '
                             '–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π –∏ –≤–µ—Ä–Ω–µ—Ç —Ç–µ–±—è –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n\n –ù–∞–¥–µ—é—Å—å '
                             '–≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ üòâ')


@dp.message_handler(commands="menu")
async def menu_command(message: types.Message):
    await clear_chat_2(message, 25)
    if message.from_user.id == bot_token.ADMIN_ID or message.from_user.id == bot_token.MARAT:
        await message.answer('üü¢ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ ‚¨á', reply_markup=admin_buttons)
    else:
        await message.answer('üü¢ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ ‚¨á', reply_markup=client_buttons)



# @dp.message_handler(commands="hide_menu")
# async def hide_menu_command(message: types.Message):
#     await message.answer('–û–∫, —Å–≤–µ—Ä–Ω—É–ª ü§ì', reply_markup=ReplyKeyboardRemove())


"""""""""""""""""""admin-handlers"""""""""""""""""""""

""" –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π  -  –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#2#"))
async def list_of_travel_command_call(callback: types.CallbackQuery):
    if await exist_or_not_travel() is False:
        await callback.answer("–ù–µ –Ω–∞—à–µ–ª –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π üòî, –Ω–∞–¥–æ –∏—Ö —Å–æ–∑–¥–∞—Ç—å! üòâ")
    else:
        await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
        await list_travel_admin(callback.message)
        await callback.answer()


""" –°–ø–∏—Å–æ–∫ –ø—Ä–æ—à–µ–¥—à–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π  -  –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#38#"))
async def archive_list_of_travel_command_call(callback: types.CallbackQuery):
    if await archive_exist_or_not_travel() is False:
        await callback.answer("–ù–µ –Ω–∞—à–µ–ª –∞—Ä—Ö–∏–≤–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π! ü§ì")
    else:
        await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
        await archive_list_travel_admin(callback.message)
        await callback.answer()


""" –°–≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π  -  –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#10#"))
async def drop_travel_list_call(callback: types.CallbackQuery):
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await callback.message.answer('üü¢ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ ‚¨á', reply_markup=admin_buttons)
    await callback.answer()


""" –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é  -  –∞–¥–º–∏–Ω"""


@dp.callback_query_handler(filters.Text(contains="#9#"))
async def get_admin_list_travel_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    status = sql_part.sql_get_book_status(call[1])
    if status == "open":
        await all_info_travel_admin(callback.message, callback, call[1])
    else:
        await all_info_travel_admin_2(callback.message, callback, call[1])
    await callback.answer()


""" –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞—Ä—Ö–∏–≤–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é  -  –∞–¥–º–∏–Ω"""


@dp.callback_query_handler(filters.Text(contains="#39#"))
async def get_admin_list_travel_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await archive_all_info_travel_admin(callback.message, callback, call[1])
    await callback.answer()


""" –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è  -  –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#11#"))
async def get_client_list_travel_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    if await exist_or_not_client_list_travel(call[1]) is False:
        await callback.answer("–£–ø—Å! –ü–æ–∫–∞ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –Ω–µ—Ç ü•∫")
    else:
        await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
        await get_client_list_travel(callback.message, callback, call[1])


""" –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è  -  –∞–¥–º–∏–Ω (–∞—Ä—Ö—Ç–≤–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ) """


@dp.callback_query_handler(filters.Text(contains="#42#"))
async def archive_get_client_list_travel_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    if await exist_or_not_client_list_travel(call[1]) is False:
        await callback.answer("–£–ø—Å! –ó–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –Ω–µ—Ç ü•∫")
    else:
        await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
        await archive_get_client_list_travel(callback.message, callback, call[1])


""" –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∞–≤—à–∏–º—Å—è –∫–ª–∏–µ–Ω—Ç–µ  -  –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#37#"))
async def get_admin_list_travel_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await get_traveler_info(callback.message, call[1], call[2], call[3])
    await callback.answer()


""" –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∞–≤—à–∏–º—Å—è –∫–ª–∏–µ–Ω—Ç–µ  -  –∞–¥–º–∏–Ω (–∞—Ä—Ö–∏–≤–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ) """


@dp.callback_query_handler(filters.Text(contains="#43#"))
async def get_admin_list_travel_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await archive_get_traveler_info(callback.message, call[1], call[2], call[3])
    await callback.answer()


""" –û–ø–ª–∞—Ç–∞  -  –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#19#"))
async def mark_payment_true_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await sql_part.sql_payment_client_notification_true(call[1], call[3])
    await callback.answer("–ü–æ—Å—Ç–∞–≤–∏–ª ‚úÖ")
    await get_traveler_info(callback.message, call[3], call[1], call[2])


@dp.callback_query_handler(filters.Text(contains="#20#"))
async def mark_payment_false_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await sql_part.sql_payment_client_notification_false(call[1], call[3])
    await callback.answer("–ü–æ—Å—Ç–∞–≤–∏–ª ‚ùå")
    await get_traveler_info(callback.message, call[3], call[1], call[2])


""" –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞  -  –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#21#"))
async def cancel_travel_admin_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await confirm_action_admin_client_book(callback, call[1], call[2])
    await callback.answer()


""" –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ  -  –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#17#"), state=None)
async def get_client_list_travel_call(callback: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    call = callback.data.split("&")
    await FSMAdminSendToClient.id_travel.set()
    id_travel = call[1]
    async with state.proxy() as data:
        data["id_travel"] = id_travel
    await FSMAdminSendToClient.next()
    await callback.message.answer(text="–ß—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                       "—Ä–µ–∂–∏–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–≤—à–∏–º—Å—è.")
    await callback.answer()


@dp.message_handler(state=FSMAdminSendToClient.message_send)
async def load_client_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["text_to_client"] = message.text
    diction = sql_part.sql_get_list_of_travelers_for_one_travel(data["id_travel"])
    id_user_list = [dic[5] for dic in diction]
    await FSMAdminSendToClient.id_users.set()
    async with state.proxy() as data:
        data["id_users"] = id_user_list  # call - —Å–ø–∏—Å–æ–∫ —Å id –∫–ª–∏–µ–Ω—Ç–æ–≤
    for id_user in data["id_users"]:
        if id_user == str(bot_token.ADMIN_ID):
            continue
        else:
            await bot.send_message(id_user, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @friendstrip ü§ó\n________________________________________"
                                            f"___\n\n{data['text_to_client']}")
    last_msg = await bot.send_message(bot_token.ADMIN_ID, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üëå")
    await state.finish()
    time.sleep(1.5)
    await clear_chat_2(last_msg, 20)
    keyboard = InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    for string in diction:
        button = InlineKeyboardButton(f"ü§† {string[0]} | üí∏ –æ–ø–ª–∞—Ç–∞: {string[3]}",
                                      # string[0] - –∏–º—è, string[3] - –æ–ø–ª–∞—Ç–∞
                                      callback_data=f"#37#&{string[4]}&{string[6]}&{string[5]}")  # string[4] - id, string[6] - travel_id  # info_client
        keyboard.add(button)
    await bot.send_message(message.from_user.id, f"üíÅ‚Äç‚ôÇ –≤–æ—Ç –∫—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è:",
                           reply_markup=keyboard
                           .add(InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ",
                                                     callback_data=f"#17#&{data['id_travel']}"))  # send_message_to
                           .add(InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                                     callback_data=f"#18#&{data['id_travel']}"))  # back_to_all_info_travel
                           )


""" –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è  -  –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#15#"))
async def delete_travel_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await confirm_action_admin_delete_travel(callback, call[1], call[2], call[3])
    await callback.answer()
    # await delete_travel_admin(callback, call[1], call[2], call[3])


""" –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è  -  –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#1#"), state=None)
async def create_travel(callback: types.CallbackQuery):
    await bot.delete_message(message_id=callback.message.message_id,
                             chat_id=callback.message.chat.id)
    await FSMAdmin.name.set()
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                       "—Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.")
    await callback.answer()


@dp.message_handler(state=FSMAdmin.name)
async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["name"] = message.text
    await FSMAdmin.next()
    await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–¥-–º–º-–≥–≥\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                       "—Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.")


@dp.message_handler(state=FSMAdmin.date)
async def load_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            date_1 = datetime.datetime.strptime(message.text, '%d-%m-%y')
            data["date"] = date_1
            # tt = datetime.datetime.now()  # —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
            # print(tt.date())  # –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
            await FSMAdmin.next()
            await message.answer("–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                               "—Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.")
        except ValueError:
            await bot.send_message(message.from_user.id,
                                   "ü§î –í–æ–∑–º–æ–∂–Ω–æ —Ç–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ ü§ì\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                   "—Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.")


@dp.message_handler(state=FSMAdmin.description)
async def load_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["description"] = message.text
    await FSMAdmin.next()
    await message.answer("–í–≤–µ–¥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                       "—Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.")


@dp.message_handler(state=FSMAdmin.price)
async def load_price(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await bot.send_message(message.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ ü§ì\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                       "—Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.")
    else:
        async with state.proxy() as data:
            data["price"] = message.text + " —Ä—É–±."
        await FSMAdmin.next()
        await message.answer("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è –∂–µ–ª–∞—é—â–∏—Ö\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                       "—Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.")


@dp.message_handler(state=FSMAdmin.amount)
async def load_amount(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await bot.send_message(message.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ ü§ì\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                       "—Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.")
    else:
        async with state.proxy() as data:
            data["amount"] = message.text
        await FSMAdmin.next()
        await message.answer("–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                       "—Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.")


@dp.message_handler(content_types="photo", state=FSMAdmin.photo)
async def load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["photo"] = message.photo[0].file_id
    await FSMAdmin.next()
    if await sql_part.sql_add_travel(state) == "Error db":
        await state.finish()
        last_msg = await message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—É—à–µ—Å—Ç–≤–∏–µ, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üòî")
        time.sleep(1.5)
        await clear_chat_2(last_msg, 25)
    else:
        await state.finish()
        last_msg = await message.answer("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å–æ–∑–¥–∞–Ω–æ ‚ù§")
        time.sleep(1.5)
        await clear_chat_2(last_msg, 25)
        await bot.send_message(message.chat.id, 'üü¢ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ ‚¨á', reply_markup=admin_buttons)


""" –ù–∞–∑–∞–¥  -  –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è (–≥–¥–µ —Ñ–æ—Ç–æ) –æ–±—Ä–∞—Ç–Ω–æ –∫ —Å–ø–∏—Å–∫—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π  -  –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#14#"))
async def back_to_travel_list_admin_call(callback: types.CallbackQuery):
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await list_travel_admin(callback.message)


""" –ù–∞–∑–∞–¥  -  –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è (–≥–¥–µ —Ñ–æ—Ç–æ) –æ–±—Ä–∞—Ç–Ω–æ –∫ —Å–ø–∏—Å–∫—É –∞—Ä—Ö–∏–≤–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π  -  –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#40#"))
async def archive_back_to_travel_list_admin_call(callback: types.CallbackQuery):
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await archive_list_travel_admin(callback.message)


""" –ù–∞–∑–∞–¥  -  –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –≤ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è  -  –∞–¥–º–∏–Ω"""


@dp.callback_query_handler(filters.Text(contains="#18#"))
async def back_to_all_info_travel_call(callback: types.CallbackQuery):
    call = callback.data.split('&')
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    status = sql_part.sql_get_book_status(call[1])
    if status == "open":
        await all_info_travel_admin(callback.message, callback, call[1])
    else:
        await all_info_travel_admin_2(callback.message, callback, call[1])
    await callback.answer()


""" –ù–∞–∑–∞–¥  -  –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –≤ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è  -  –∞–¥–º–∏–Ω"""


@dp.callback_query_handler(filters.Text(contains="#41#"))
async def archive_back_to_all_info_travel_call(callback: types.CallbackQuery):
    call = callback.data.split('&')
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await archive_all_info_travel_admin(callback.message, callback, call[1])
    await callback.answer()


""" –ù–∞–∑–∞–¥  -  –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è  -  –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#22#"))
async def back_to_all_travelers_list_call(callback: types.CallbackQuery):
    call = callback.data.split('&')
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await get_client_list_travel(callback.message, callback, call[1])


""" –ù–∞–∑–∞–¥  -  –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è  -  –∞–¥–º–∏–Ω  (–∞—Ä—Ö–∏–≤–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ)"""


@dp.callback_query_handler(filters.Text(contains="#44#"))
async def archive_back_to_all_travelers_list_call(callback: types.CallbackQuery):
    call = callback.data.split('&')
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await archive_get_client_list_travel(callback.message, callback, call[1])


""" –ó–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ - –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#12#"), state=None)
async def book_client_by_admin_command(callback: types.CallbackQuery, state: FSMContext):
    call = callback.data.split("&")
    default_amount_book_info = sql_part.sql_get_default_amount_book_info(call[1])
    current_amount_book_info = sql_part.sql_get_current_amount_book_info(call[1])
    if current_amount_book_info == default_amount_book_info:
        await callback.answer("–ü–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å! –ú–µ—Å—Ç –Ω–µ—Ç ü§ì")
    else:
        await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
        await FSMBookClient.travel_id.set()
        id_travel = call[1]
        async with state.proxy() as data:
            data["id_travel"] = id_travel
        await FSMBookClient.tg_user_id.set()
        tg_user_id = callback.from_user.id
        async with state.proxy() as data:
            data["tg_user_id"] = tg_user_id
        await FSMBookClient.travel_name.set()
        travel_name = call[2]
        async with state.proxy() as data:
            data["travel_name"] = travel_name
        await FSMBookClient.travel_date.set()
        travel_date = call[3]
        async with state.proxy() as data:
            data["travel_date"] = travel_date
        await FSMBookClient.tg_user_name.set()
        tg_user_name = callback.from_user.username
        async with state.proxy() as data:
            data["tg_user_name"] = tg_user_name
        await FSMBookClient.next()
        await callback.message.answer(text="–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –∑–∞–ø–∏—Å–∞—Ç—å? ü§î\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                       "—Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.")  # –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üòä
        await callback.answer()


@dp.message_handler(state=FSMBookClient.client_amount)
async def load_client_amount(messsage: types.Message, state: FSMContext):
    if messsage.text.isdigit() is False:
        await bot.send_message(messsage.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ ü§ì\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                       "—Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.")
    else:
        async with state.proxy() as data:
            default_amount_book_info = sql_part.sql_get_default_amount_book_info(data['id_travel'])
            current_amount_book_info = sql_part.sql_get_current_amount_book_info(data['id_travel'])
            # if current_amount_book_info == default_amount_book_info:
            #     await bot.send_message(messsage.from_user.id,
            #                            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –ø–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ, "
            #                            f"–º–æ–∂–µ—Ç —É –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω—è—Ç—å—Å—è –ø–ª–∞–Ω—ã. \n\n–ù–∞–∂–º–∏ "
            #                            f"/cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏.")
            if default_amount_book_info < current_amount_book_info + int(messsage.text):
                free_places = default_amount_book_info - current_amount_book_info
                await bot.send_message(messsage.from_user.id,
                                       f"üò± –û–π, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, c–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –≤—Å–µ–≥–æ - {free_places}, "
                                       f"–≤–≤–µ–¥–∏ –ø–æ–º–µ–Ω—å—à–µ. \n\n–ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                       "—Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.")
            else:
                data["client_amount"] = messsage.text
                await FSMBookClient.next()
                await messsage.answer("–í–≤–µ–¥–∏ –§–ò–û –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á üòä\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                       "—Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.")


@dp.message_handler(state=FSMBookClient.client_name)
async def load_client_name(messsage: types.Message, state: FSMContext):
    if len(messsage.text.split()) != 3:
        await bot.send_message(messsage.from_user.id, "–í–≤–µ–¥–∏ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôè\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                       "—Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.")
    else:
        async with state.proxy() as data:
            data["client_name"] = messsage.text
        await FSMBookClient.next()
        await messsage.answer("–¢–µ–ø–µ—Ä—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òé\nüëâ –±–µ–∑ 8 –∏ +7 –≤ –Ω–∞—á–∞–ª–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 9998887776\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                       "—Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.")


@dp.message_handler(state=FSMBookClient.phone)
async def load_phone(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False or len(message.text) != 10:
        await bot.send_message(message.from_user.id,
                               "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ì,\nüëâ –±–µ–∑ 8 –∏ +7 –≤ –Ω–∞—á–∞–ª–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 9998887776\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                       "—Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.")
        await FSMBookClient.phone.set()
    else:
        async with state.proxy() as data:
            data["phone"] = "+7" + message.text
        # del data['travel_name']
        # del data['travel_date']
        await sql_part.sql_book(state)
        await state.finish()
        last_msg = await message.answer('–ó–∞–ø–∏—Å–∞–ª! üòé')
        time.sleep(1.5)
        await clear_chat_2(last_msg, 20)
        status = sql_part.sql_get_book_status(data["id_travel"])
        if status == "open":
            for string in sql_part.sql_info_travel(data["id_travel"]):
                await bot.send_photo(message.from_user.id, string[6],  # string[6] - —Ñ–æ—Ç–æ
                                     f'{string[1]}\n\n–î–∞—Ç–∞: {string[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {string[3]} '
                                     f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {string[4]}\n–ö–æ–ª–∏—á–µ–≤–æ –º–µ—Å—Ç: {string[5]}',
                                     reply_markup=InlineKeyboardMarkup(row_width=2, resize_keyboard=True) \
                                     .add(InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è ‚õ∑üö£‚Äç‚ôÄüèÇ",
                                                               callback_data=f"#11#&{string[0]}"))  # string[0] - id –ø—É—Ç
                                     .add(
                                         InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å –∂–µ–ª–∞—é—â–µ–≥–æ üôã‚Äç‚ôÄüôã",
                                                              callback_data=f"#12#&{string[0]}&{string[1]}&{string[2]}"))  # string[0] - id –ø—É—Ç book_client_by_admin
                                     .add(InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å ‚ùÑ",
                                                               callback_data=f"#13#&{string[0]}"))  # close_book
                                     .add(InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                                               callback_data=f"#14#"))  # back_to_travel_list_admin
                                     .add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ ‚ùå",
                                                               callback_data=f"#15#&{string[0]}&{string[1]}&{string[2]}")))  # delete_travel_admin
        else:
            for string in sql_part.sql_info_travel(data["id_travel"]):
                await bot.send_photo(message.from_user.id, string[6],  # string[6] - —Ñ–æ—Ç–æ
                                     f'{string[1]}\n\n–î–∞—Ç–∞: {string[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {string[3]} '
                                     f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {string[4]}\n–ö–æ–ª–∏—á–µ–≤–æ –º–µ—Å—Ç: {string[5]}',
                                     reply_markup=InlineKeyboardMarkup(row_width=2, resize_keyboard=True) \
                                     .add(InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è ‚õ∑üö£‚Äç‚ôÄüèÇ",
                                                               callback_data=f"#11#&{string[0]}"))  # string[0] - id –ø—É—Ç
                                     .add(
                                         InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å –∂–µ–ª–∞—é—â–µ–≥–æ üôã‚Äç‚ôÄüôã",
                                                              callback_data=f"#12#&{string[0]}&{string[1]}&{string[2]}"))  # string[0] - id –ø—É—Ç book_client_by_admin
                                     .add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å ü•≥",
                                                               callback_data=f"#16#&{string[0]}"))  # open_book
                                     .add(InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                                               callback_data=f"#14#"))  # back_to_travel_list_admin
                                     .add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ ‚ùå",
                                                               callback_data=f"#15#&{string[0]}&{string[1]}&{string[2]}")))  # delete_travel_admin
        await bot.send_message(bot_token.MSG_STOREGE, f"‚úÖ @{message.from_user.username}\n{data['client_name']}"
                                           f"\n___________________________________________\n\n"
                                           f"ü•≥ –ó–∞–ø–∏—Å–∞–ª—Å—è(–ª–∞—Å—å) –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ:\n{data['travel_name']} –æ—Ç "
                                                      f"{data['travel_date']}")


""" –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è - –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#5#"))
async def admin_delete_travel_yes_action(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await delete_travel_admin(callback, call[1], call[2], call[3])


""" –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤ –∞—Ä—Ö–∏–≤ - –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#45#"))
async def put_to_archive_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await put_to_archive(callback, call[1])


""" –í–µ—Ä–Ω—É—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∏–∑ –∞—Ä—Ö–∏–≤–∞ –≤ –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π - –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#46#"))
async def put_to_archive_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await restore_from_archive(callback, call[1])


""" –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è - –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#6#"))
async def admin_delete_travel_no_action(callback: types.CallbackQuery):
    await clear_chat_2(callback.message, 1)
    await callback.answer()


""" –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ - –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#7#"))
async def yes_command(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await cancel_book_by_admin(callback, call[1], call[2])


""" –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ - –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#8#"))
async def yes_command(callback: types.CallbackQuery):
    await clear_chat_2(callback.message, 1)
    await callback.answer()


""" –ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å  -  –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#13#"))
async def close_book_call(callback: types.CallbackQuery):
    call = callback.data.split('&')
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    sql_part.sql_close_book(call[1])
    await all_info_travel_admin_2(callback.message, callback, call[1])


""" –û—Ç–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å  -  –∞–¥–º–∏–Ω """


@dp.callback_query_handler(filters.Text(contains="#16#"))
async def open_book_call(callback: types.CallbackQuery):
    call = callback.data.split('&')
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    sql_part.sql_open_book(call[1])
    await all_info_travel_admin(callback.message, callback, call[1])

""""""""""""""""""" client """""""""""""""""""""""""""""


"""""""""""" functions """""""""""


async def list_travel_client(message):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π (client)
    """
    keyboard = InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    for string in sql_part.sql_list_travel():
        button = InlineKeyboardButton(f"üèï {string[1]}  {string[2]}",
                                      callback_data=f"#23#&{string[0]}")  # client_all_info_travel
        keyboard.add(button)
    await message.answer(f"–ß—Ç–æ –ø–æ –¥—É—à–µ? üíÅ‚Äç‚ôÇ", reply_markup=keyboard
                         .add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='#24#')))  # drop_client_travel_list


async def all_client_book_list(message, callback):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (client)
    """
    keyboard = InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    for string in sql_part.sql_show_me_my_book_client(callback.from_user.id):
        button = InlineKeyboardButton(f"üèï {string[2]}  {string[3]}",
                                      callback_data=f"#25#&{string[1]}")  # client_all_book
        keyboard.add(button)
    await message.answer(f"üíÅ‚Äç‚ôÇ –≤–æ—Ç —Ç–≤–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard
                         .add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='#26#')))  # back_to_head_menu_client


async def all_client_archive_book_list(message, callback):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (client)
    """
    keyboard = InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    for string in sql_part.sql_show_me_my_archive_book_client(callback.from_user.id):
        button = InlineKeyboardButton(f"üèï {string[2]}  {string[3]}",
                                      callback_data=f"#48#&{string[1]}")  # client_all_book
        keyboard.add(button)
    await message.answer(f"üíÅ‚Äç‚ôÇ –≤–æ—Ç —Ç–≤–æ–∏ –∑–∞–µ—Ä—à—ë–Ω–Ω—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:", reply_markup=keyboard
                         .add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='#26#')))  # back_to_head_menu_client


async def all_info_travel_client(message, callback, id_travel):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é (client)
    """
    await bot.delete_message(message_id=message.message_id, chat_id=message.chat.id)
    for string in sql_part.sql_info_travel(id_travel):
        await bot.send_photo(callback.from_user.id, string[6],
                             f'{string[1]}\n\n–î–∞—Ç–∞: {string[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {string[3]} '
                             f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {string[4]}\n–ö–æ–ª–∏—á–µ–≤–æ –º–µ—Å—Ç: {string[5]}',
                             reply_markup=InlineKeyboardMarkup(row_width=2, resize_keyboard=True) \
                             .add(InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è ‚õ∑üö£‚Äç‚ôÄüèÇ",
                                                       callback_data=f"#27#&{string[0]}&{string[1]}&{string[2]}"))  # book_me
                             .add(InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                                       callback_data=f"#28#"))  # back_to_client_travel_list
                             )


async def all_info_client_book(message, callback, id_travel):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é (client)
    """
    for string in sql_part.sql_info_travel(id_travel):
        await bot.send_photo(callback.from_user.id, string[6],
                             f'{string[1]}\n\n–î–∞—Ç–∞: {string[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {string[3]} '
                             f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {string[4]}\n–ö–æ–ª–∏—á–µ–≤–æ –º–µ—Å—Ç: {string[5]}',
                             reply_markup=InlineKeyboardMarkup(row_width=2, resize_keyboard=True) \
                             .add(InlineKeyboardButton("–£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ üí∏",
                                                       callback_data=f"#29#&{string[0]}&{string[1]}&{string[2]}"))  # payment
                             .add(InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úè",
                                                       callback_data=f"#30#&{string[1]}&{string[2]}&{string[0]}"))  # review
                             .add(InlineKeyboardButton("–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã üí≥",
                                                       callback_data=f"#31#&{id_travel}"))  # info_to_pay
                             .add(InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                                       callback_data=f"#32#"))  # back_to_client_book_list
                             .add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å ‚ùå",
                                                       callback_data=f"#33#&{string[0]}&{string[1]}&{string[2]}"))  # cancel_by_client
                             )


async def all_info_client_archive_book(message, callback, id_travel):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é (client)
    """
    for string in sql_part.sql_info_travel(id_travel):
        await bot.send_photo(callback.from_user.id, string[6],
                             f'{string[1]}\n\n–î–∞—Ç–∞: {string[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {string[3]} '
                             f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {string[4]}',
                             reply_markup=InlineKeyboardMarkup(row_width=2, resize_keyboard=True) \
                             # .add(InlineKeyboardButton("–£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ üí∏",
                             #                           callback_data=f"#29#&{string[0]}&{string[1]}&{string[2]}"))  # payment
                             .add(InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úè",
                                                       callback_data=f"#30#&{string[1]}&{string[2]}&{string[0]}"))  # review
                             # .add(InlineKeyboardButton("–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã üí≥",
                             #                           callback_data=f"#31#&{id_travel}"))  # info_to_pay
                             .add(InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                                       callback_data=f"#49#"))  # back_to_client_book_list
                             # .add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å ‚ùå",
                             #                           callback_data=f"#33#&{string[0]}&{string[1]}&{string[2]}"))  # cancel_by_client
                             )


async def client_cancel_book(callback, id_travel, travel_name, travel_date):
    """
    –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏  -  –∫–ª–∏–µ–Ω—Ç
    """
    tg_user_id = callback.from_user.id
    client_name = sql_part.sql_get_client_name(id_travel, tg_user_id)
    await sql_part.sql_cancel_travel_client_by_client(id_travel, tg_user_id)
    await callback.answer(text=f"üò¢ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n{travel_name} –æ—Ç {travel_date} –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await clear_chat_2(callback.message, 10)
    await bot.send_message(bot_token.MSG_STOREGE, f"‚ùå @{callback.from_user.username}\n{client_name}"
                                                  f"\n___________________________________________\n\n"
                                                  f"üòï –û—Ç–º–µ–Ω–∏–ª(–∞) –∑–∞–ø–∏—Å—å –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ:\n{travel_name} o—Ç {travel_date}")
    if len(sql_part.sql_show_me_my_book_client(callback.from_user.id)) == 0:
        await callback.message.answer('üü¢ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ ‚¨á', reply_markup=client_buttons)
    else:
        await all_client_book_list(callback.message, callback)
        await callback.answer()


async def confirm_action_client_cancel_book(callback, id_travel, travel_name, travel_date):
    """
    –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞  -  –∫–ª–∏–µ–Ω—Ç
    """
    keyboard = InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    await callback.message.answer(f"<b>–¢–æ—á–Ω–æ?</b>üò±", reply_markup=keyboard
                         .insert(InlineKeyboardButton('–î–∞, 100% üò§', callback_data=f'#34#&{id_travel}&{travel_name}&{travel_date}'))  # client_delete__book_yes_action
                         .insert(InlineKeyboardButton('–ù–µ—Ç üò∞', callback_data='#35#')), parse_mode="html"  # client_delete__book_no_action
                         )


""""""""""""""""""" client-handlers """""""""""""""""""""

""" –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π - –∫–ª–∏–µ–Ω—Ç """


@dp.callback_query_handler(filters.Text(contains="#3#"))
async def book_list_command_call(callback: types.CallbackQuery):
    if await exist_or_not_travel() is False:
        await callback.answer("–ù–µ –Ω–∞—à–µ–ª –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è üòî")
    else:
        await clear_chat_2(callback.message, 10)
        await list_travel_client(callback.message)
        await callback.answer()


""" –ù–∞–∑–∞–¥ - –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é - client"""


@dp.callback_query_handler(filters.Text(contains="#24#"))
async def drop_travel_list_call(callback: types.CallbackQuery):
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await callback.message.answer('üü¢ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ ‚¨á', reply_markup=client_buttons)
    await callback.answer()


""" –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ–Ω—Ç–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é - –∫–ª–∏–µ–Ω—Ç """


@dp.callback_query_handler(filters.Text(contains="#23#"))
async def get_info_list_travel_client_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await all_info_travel_client(callback.message, callback, call[1])
    await callback.answer()


""" –ù–∞–∑–∞–¥ - –æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –∫ —Å–ø–∏—Å–∫—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π """


@dp.callback_query_handler(filters.Text(contains="#28#"))
async def back_to_client_travel_list_call(callback: types.CallbackQuery):
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await list_travel_client(callback.message)


""" –ó–∞–ø–∏—Å–∞—Ç—å—Å—è  -  –∫–ª–∏–µ–Ω—Ç """


@dp.callback_query_handler(filters.Text(contains="#27#"), state=None)
async def book_me_command_call(callback: types.CallbackQuery, state: FSMContext):
    call = callback.data.split("&")
    default_amount_book_info = sql_part.sql_get_default_amount_book_info(call[1])
    current_amount_book_info = sql_part.sql_get_current_amount_book_info(call[1])
    if len(sql_part.sql_check_does_client_already_book(call[1], callback.from_user.id)) != 0:
        await callback.answer('–¢—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª—Å—è(–ª–∞—Å—å) –Ω–∞ —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! üòÄ')
        await callback.answer()
    elif current_amount_book_info == default_amount_book_info:
        await callback.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –ø–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å.")
    elif sql_part.sql_get_book_status(call[1]) == "close":
        await callback.answer('–°–æ—Ä—Ä–∏, –ø–æ–∫–∞ –∑–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞ üòî')
        await callback.answer()
    else:
        await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
        await FSMClient.travel_id.set()
        id_travel = call[1]
        async with state.proxy() as data:
            data["id_travel"] = id_travel
        await FSMClient.tg_user_id.set()
        tg_user_id = callback.from_user.id
        async with state.proxy() as data:
            data["tg_user_id"] = tg_user_id
            print(data["tg_user_id"])
        await FSMClient.travel_name.set()
        travel_name = call[2]
        async with state.proxy() as data:
            data["travel_name"] = travel_name
        await FSMClient.travel_date.set()
        travel_date = call[3]
        async with state.proxy() as data:
            data["travel_date"] = travel_date
        await FSMClient.tg_user_name.set()
        tg_user_name = callback.from_user.username
        async with state.proxy() as data:
            data["tg_user_name"] = tg_user_name
        await FSMClient.next()
        await callback.message.answer("–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –∑–∞–ø–∏—Å–∞—Ç—å? ü§î\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ "
                                      "/cancel, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.\n\n"
                                      "‚ùó –ó–∞–ø–∏—Å—ã–≤–∞—è—Å—å –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å\n[—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –∏ "
                                      "–æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö](https://docs.google.com/document/d/1dcrCyFlqhcJBn"
                                      "xXuG93DSFixqZ5XAwdCDU3aDNIGzQY/edit?usp=sharing)", parse_mode="Markdown", disable_web_page_preview=True)
        await callback.answer()  # [friendstrip](https://www.instagram.com/friends_trip/)
                                 # <a href='{path}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</a>"


@dp.message_handler(state=FSMClient.client_amount)
async def load_client_amount(messsage: types.Message, state: FSMContext):
    if messsage.text.isdigit() is False:
        await bot.send_message(messsage.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ ü§ì\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ "
                                                      "/cancel, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.")
    else:
        async with state.proxy() as data:
            default_amount_book_info = sql_part.sql_get_default_amount_book_info(data['id_travel'])
            current_amount_book_info = sql_part.sql_get_current_amount_book_info(data['id_travel'])
            # if current_amount_book_info == default_amount_book_info:
            #     await bot.send_message(messsage.from_user.id,
            #                            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –ø–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ, "
            #                            f"–º–æ–∂–µ—Ç —É –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω—è—Ç—å—Å—è –ø–ª–∞–Ω—ã. \n\n–ù–∞–∂–º–∏ "
            #                            f"/cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏.")
            if default_amount_book_info < current_amount_book_info + int(messsage.text):
                free_places = default_amount_book_info - current_amount_book_info
                await bot.send_message(messsage.from_user.id,
                                       f"üò± –û–π, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, c–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –≤—Å–µ–≥–æ - {free_places}, "
                                       f"–≤–≤–µ–¥–∏ –ø–æ–º–µ–Ω—å—à–µ. \n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ "
                                                      "/cancel, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.")
            else:
                data["client_amount"] = messsage.text
                await FSMClient.next()
                await messsage.answer("–í–≤–µ–¥–∏ —Å–≤–æ–µ –§–ò–û, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á üòä\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ "
                                                      "/cancel, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.")


@dp.message_handler(state=FSMClient.client_name)
async def load_client_name(messsage: types.Message, state: FSMContext):
    if len(messsage.text.split()) != 3:
        await bot.send_message(messsage.from_user.id, "–í–≤–µ–¥–∏ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôè\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ "
                                                      "/cancel, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.")
    else:
        async with state.proxy() as data:
            data["client_name"] = messsage.text
        await FSMClient.next()
        await messsage.answer("–¢–µ–ø–µ—Ä—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òé\nüëâ –±–µ–∑ 8 –∏ +7 –≤ –Ω–∞—á–∞–ª–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 9998887776\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ "
                                                      "/cancel, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.")


@dp.message_handler(state=FSMClient.phone)
async def load_phone(message: types.Message, state: FSMContext):
    last_msg = message
    if message.text.isdigit() is False or len(message.text) != 10:
        await bot.send_message(message.from_user.id,
                               "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ì,\nüëâ –±–µ–∑ 8 –∏ +7 –≤ –Ω–∞—á–∞–ª–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 9998887776\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ "
                                                      "/cancel, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.")
        await FSMClient.phone.set()
    else:
        async with state.proxy() as data:
            data["phone"] = "+7" + message.text
        # del data['travel_name']
        # del data['travel_date']
        await sql_part.sql_book(state)
        await state.finish()
        await clear_chat_2(last_msg, 20)
        await message.answer(f"–ó–∞–ø–∏—Å–∞–ª–∏ —Ç–µ–±—è! ‚ù§\n\n–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ: {data['travel_name']}\n–î–∞—Ç–∞: {data['travel_date']}\n\n–†–∞–¥—ã, —á—Ç–æ —Ç—ã —Ç–µ–ø–µ—Ä—å –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ! ü§ó\n–ü–æ–∑–∂–µ –ø—Ä–∏—à–ª–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ "
                              "–≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏.\n\nüôè –ü—Ä–æ—Å—å–±–∞ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã –∏–ª–∏ "
                              "–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
                              "üí≥ 4058 7031 3342 ****\n‚òé —Ç–µ–ª. 952 502 ** **\n\n–£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –≤–∫–ª–∞–¥–∫—É "
                              "'–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' –≤ –º–µ–Ω—é.\n\n–î–æ —Å–≤—è–∑–∏!")
        time.sleep(2)
        await bot.send_message(message.chat.id, 'üü¢ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ ‚¨á', reply_markup=client_buttons)
        await bot.send_message(bot_token.MSG_STOREGE, f"‚úÖ @{message.from_user.username}\n{data['client_name']}"
                                                      f"\n___________________________________________\n\n"
                                                      f"ü•≥ –ó–∞–ø–∏—Å–∞–ª—Å—è(–ª–∞—Å—å) –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ:\n{data['travel_name']} –æ—Ç "
                                                      f"{data['travel_date']}")


""" –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è  -  –∫–ª–∏–µ–Ω—Ç """


@dp.callback_query_handler(filters.Text(contains="#4#"))
async def get_my_book_command(callback: types.CallbackQuery):
    if len(sql_part.sql_show_me_my_book_client(callback.from_user.id)) == 0:
        await callback.answer("–ù–µ –Ω–∞—à–µ–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π üòî")
    else:
        await clear_chat_2(callback.message, 10)
        await all_client_book_list(callback.message, callback)
        await callback.answer()


""" –ú–æ–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è  -  –∫–ª–∏–µ–Ω—Ç """


@dp.callback_query_handler(filters.Text(contains="#47#"))
async def get_my_archive_book_command(callback: types.CallbackQuery):
    if len(sql_part.sql_show_me_my_archive_book_client(callback.from_user.id)) == 0:
        await callback.answer("–ù–µ –Ω–∞—à–µ–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫!")
    else:
        await clear_chat_2(callback.message, 10)
        await all_client_archive_book_list(callback.message, callback)
        await callback.answer()


""" –ù–∞–∑–∞–¥ - –æ—Ç —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é - –∫–ª–∏–µ–Ω—Ç"""


@dp.callback_query_handler(filters.Text(contains="#26#"))
async def back_to_head_menu_client_call(callback: types.CallbackQuery):
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await callback.message.answer('üü¢ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ ‚¨á', reply_markup=client_buttons)
    await callback.answer()


# @dp.callback_query_handler(filters.Text(contains="back_to_all_info_travel"))
# async def back_to_all_info_travel(callback: types.CallbackQuery):
#     call = callback.data.split('&')
#     await all_info_travel_admin(callback.message, callback, call[1])
#     await callback.answer()


""" –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é """


@dp.callback_query_handler(filters.Text(contains="#25#"))
async def client_all_book_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await all_info_client_book(callback.message, callback, call[1])
    await callback.answer()


""" –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é """


@dp.callback_query_handler(filters.Text(contains="#48#"))
async def client_all_archive_book_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await all_info_client_archive_book(callback.message, callback, call[1])
    await callback.answer()


""" –ù–∞–∑–∞–¥ - –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∫ —Å–ø–∏—Å–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π """


@dp.callback_query_handler(filters.Text(contains="#32#"))
async def back_to_client_all_book_call(callback: types.CallbackQuery):
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await all_client_book_list(callback.message, callback)
    await callback.answer()


""" –ù–∞–∑–∞–¥ - –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∫ —Å–ø–∏—Å–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π  """


@dp.callback_query_handler(filters.Text(contains="#49#"))
async def back_to_client_all_archive_book_call(callback: types.CallbackQuery):
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await all_client_archive_book_list(callback.message, callback)
    await callback.answer()


""" –£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ  -  –∫–ª–∏–µ–Ω—Ç """


@dp.callback_query_handler(filters.Text(contains="#29#"))
async def cancel_travel_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    if sql_part.sql_get_book_archive_status(call[1]) == 'no':
        await callback.answer("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø—Ä–æ—à–ª–æ, –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É! –Ω–∞–∂–º–∏ –Ω–∞–∑–∞–¥")
    else:
        tg_user_id = callback.from_user.id
        client_name = sql_part.sql_get_client_name(call[1], tg_user_id)
        await bot.send_message(bot_token.MSG_STOREGE, f"üí∏ @{callback.from_user.username}\n{client_name}"
                                                   f"\n___________________________________________\n\n"
                                                   f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª(–∞) –æ–ø–ª–∞—Ç—É –∑–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ:\n{call[2]} o—Ç {call[3]}üëå"
                                                   f"\n\n–ü—Ä–æ–≤–µ—Ä—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ üîé")
        await callback.answer(text=f"üëå –°–ø–∞—Å–∏–±–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏")
        await callback.answer()


""" –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤  -  –∫–ª–∏–µ–Ω—Ç """


@dp.callback_query_handler(filters.Text(contains="#30#"), state=None)
async def get_my_book_command(callback: types.CallbackQuery, state: FSMContext):
    call = callback.data.split("&")
    await FSMClientReview.name.set()
    name = call[1]
    async with state.proxy() as data:
        data["name"] = name
    await FSMClientReview.date.set()
    date = call[2]
    async with state.proxy() as data:
        data["date"] = date
    await FSMClientReview.id_travel.set()
    id_travel = call[3]
    async with state.proxy() as data:
        data["id_travel"] = id_travel
    await FSMClientReview.review.set()
    await callback.message.answer("–° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º —Ç–≤–æ–π –æ—Ç–∑—ã–≤ üßê\n–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –∞ —á—Ç–æ –Ω–µ—Ç."
                                  "\n\nüëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ "
                                       "—Ä–µ–∂–∏–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞.")
    await callback.answer()


@dp.message_handler(state=FSMClientReview.review)
async def load_review(messsage: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["review"] = messsage.text
    tg_user_id = messsage.from_user.id
    client_name = sql_part.sql_get_client_name(data["id_travel"], tg_user_id)
    await bot.send_message(bot_token.MSG_STOREGE,
                           f"‚úè –û—Ç–∑—ã–≤ –æ—Ç @{messsage.from_user.username}\n{client_name}\n "
                           f"\n–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ:\n{data['name']} –æ—Ç {data['date']}"
                           f"\n___________________________________________\n\n{data['review']}")
    await state.finish()
    last_msg = await messsage.answer("–°–ø–∞—Å–∏–±–æ, –Ω–∞–º –≤–∞–∂–Ω–æ –∫–∞–∂–¥–æ–µ –º–Ω–µ–Ω–∏–µ! ü§ó")
    time.sleep(2)
    await clear_chat_2(last_msg, 4)


""" –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã  -  –∫–ª–∏–µ–Ω—Ç """


@dp.callback_query_handler(filters.Text(contains="#31#"))
async def cancel_travel_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    if sql_part.sql_get_book_archive_status(call[1]) == 'no':
        await callback.answer("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø—Ä–æ—à–ª–æ, –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É! –ù–∞–∂–º–∏ '–ù–∞–∑–∞–¥'")
    else:
        await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
        await callback.message.answer("–û–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã –∏–ª–∏ "
                                  "–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
                                  "üí≥ 4058 7031 3342 ****\n‚òé —Ç–µ–ª. 952 502 ** **\n\n–°–æ–æ–±—â–∏—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ "
                                  "'–£–≤–µ–¥–æ–∏—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ' –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –º–µ–Ω—é.\n\n–°–ø–∞—Å–∏–±–æ! üôè",
                                      reply_markup=InlineKeyboardMarkup(row_width=2, resize_keyboard=True) \
                                 .insert(InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                                           callback_data=f"#36#&{call[1]}")))  # back_to_all_info_book


""" –ù–∞–∑–∞–¥ - –æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ """


@dp.callback_query_handler(filters.Text(contains="#36#"))
async def back_to_all_info_travel_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await all_info_client_book(callback.message, callback, call[1])
    await callback.answer()


""" –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å  -  –∫–ª–∏–µ–Ω—Ç """


@dp.callback_query_handler(filters.Text(contains="#33#"))
async def cancel_travel_call(callback: types.CallbackQuery):
    call = callback.data.split("&")
    if sql_part.sql_get_book_archive_status(call[1]) == 'no':
        await callback.answer("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø—Ä–æ—à–ª–æ, –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É! –ù–∞–∂–º–∏ '–ù–∞–∑–∞–¥'")
    else:
        await confirm_action_client_cancel_book(callback, call[1], call[2], call[3])
        await callback.answer()


""" –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ - –∫–ª–∏–µ–Ω—Ç """


@dp.callback_query_handler(filters.Text(contains="#34#"))
async def yes_command(callback: types.CallbackQuery):
    call = callback.data.split("&")
    await client_cancel_book(callback, call[1], call[2], call[3])


""" –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ - –∫–ª–∏–µ–Ω—Ç """


@dp.callback_query_handler(filters.Text(contains="#35#"))
async def yes_command(callback: types.CallbackQuery):
    await clear_chat_2(callback.message, 1)
    await callback.answer()


""" –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–≤–ø—Ä–æ—Å  -  –∞–¥–º–∏–Ω/–∫–ª–∏–µ–Ω—Ç """


@dp.message_handler()
async def unknown_command(message: types.Message):
    last_msg = await message.answer("–ø—Ä–æ—Å—Ç–∏, –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É! ü§∑‚Äç‚ôÇ")
    time.sleep(1.5)
    await clear_chat_2(last_msg, 2)


""" –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ """
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

